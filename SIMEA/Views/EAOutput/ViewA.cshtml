@model SIMEA.Models.ViewModels.StrategicAlignmentViewModel

@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_LayoutAcc.cshtml";
}

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">@Model.Title</h1>
        <div>
            <button class="btn btn-sm btn-outline-primary" id="toggleFullscreen">
                <i class="fas fa-expand"></i> Fullscreen
            </button>
            <a href="#" class="btn btn-sm btn-primary" id="exportBtn">
                <i class="fas fa-download fa-sm text-white-50"></i> Export
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card border-left-primary shadow h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Strategic Alignment Overview</h6>
                </div>
                <div class="card-body">
                    <p>@Model.Description</p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle mr-1"></i> This view shows the alignment between business strategies, capabilities, and applications. It helps visualize how strategic objectives are supported by business capabilities and implemented through applications.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Strategy to Implementation Alignment</h6>
                </div>
                <div class="card-body">
                    @if ((Model.BusinessStrategies?.Count ?? 0) > 0 && 
                         (Model.Capabilities?.Count ?? 0) > 0 && 
                         (Model.StrategyCapabilityLinks?.Count ?? 0) > 0)
                    {
                        <div id="strategic-alignment-diagram" style="height: 500px;"></div>
                    }
                    else
                    {
                        <div class="alert alert-warning text-center">
                            <i class="fas fa-exclamation-circle mr-2"></i> No alignment data available. Please define business strategies, capabilities, and establish links between them.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Business Strategies</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Strategy</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.BusinessStrategies != null && Model.BusinessStrategies.Any())
                                {
                                    foreach (var strategy in Model.BusinessStrategies)
                                    {
                                        <tr>
                                            <td>@strategy.BusinessGoal</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(strategy.StrategicObjective))
                                                {
                                                    @(strategy.StrategicObjective.Length > 50 
                                                        ? strategy.StrategicObjective.Substring(0, 50) + "..." 
                                                        : strategy.StrategicObjective)
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="2" class="text-center">No strategies available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Business Capabilities</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Capability</th>
                                    <th>Maturity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Capabilities != null && Model.Capabilities.Any())
                                {
                                    foreach (var capability in Model.Capabilities)
                                    {
                                        <tr>
                                            <td>@capability.CapabilityName</td>
                                            <td>
                                                <span class="badge badge-pill 
                                                    @(capability.MaturityLevel == "Advanced" ? "badge-success" : 
                                                    capability.MaturityLevel == "Intermediate" ? "badge-primary" : 
                                                    "badge-warning")">
                                                    @capability.MaturityLevel
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="2" class="text-center">No capabilities available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Supporting Applications</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Application</th>
                                    <th>Version</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Applications != null && Model.Applications.Any())
                                {
                                    foreach (var app in Model.Applications)
                                    {
                                        <tr>
                                            <td>@app.ApplicationName</td>
                                            <td>@app.Version</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="2" class="text-center">No applications available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Alignment Matrix</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="alignmentTable">
                            <thead class="thead-light">
                                <tr>
                                    <th>Business Strategy</th>
                                    <th>Business Capability</th>
                                    <th>Supporting Application</th>
                                    <th>Alignment</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var hasData = false;
                                    
                                    if (Model.StrategyCapabilityLinks != null && Model.StrategyCapabilityLinks.Any())
                                    {
                                        foreach (var link in Model.StrategyCapabilityLinks)
                                        {
                                            var strategy = Model.BusinessStrategies?.FirstOrDefault(s => s.Id.ToString() == link.SourceArtifactId);
                                            var capability = Model.Capabilities?.FirstOrDefault(c => c.Id.ToString() == link.TargetArtifactId);
                                            
                                            if (strategy != null && capability != null)
                                            {
                                                // Find if this capability has app links
                                                var capToAppLink = Model.CapabilityApplicationLinks?
                                                    .FirstOrDefault(l => l.SourceArtifactId == capability.Id.ToString());
                                                
                                                var appName = "N/A";
                                                if (capToAppLink != null)
                                                {
                                                    var app = Model.Applications?.FirstOrDefault(a => a.Id.ToString() == capToAppLink.TargetArtifactId);
                                                    if (app != null)
                                                    {
                                                        appName = app.ApplicationName;
                                                    }
                                                }
                                                
                                                // Determine alignment based on link description if available
                                                var alignment = "Medium";
                                                if (!string.IsNullOrEmpty(link.LinkDescription))
                                                {
                                                    if (link.LinkDescription.Contains("strong") || 
                                                        link.LinkDescription.Contains("high") ||
                                                        link.LinkDescription.Contains("direct"))
                                                    {
                                                        alignment = "High";
                                                    }
                                                    else if (link.LinkDescription.Contains("weak") || 
                                                             link.LinkDescription.Contains("low") ||
                                                             link.LinkDescription.Contains("indirect"))
                                                    {
                                                        alignment = "Low";
                                                    }
                                                }
                                                
                                                var badgeClass = alignment == "High" ? "badge-success" :
                                                               alignment == "Medium" ? "badge-primary" : "badge-warning";
                                                
                                                <tr>
                                                    <td>@strategy.BusinessGoal</td>
                                                    <td>@capability.CapabilityName</td>
                                                    <td>@appName</td>
                                                    <td>
                                                        <span class="badge @badgeClass">@alignment</span>
                                                    </td>
                                                </tr>
                                                hasData = true;
                                            }
                                        }
                                    }
                                    
                                    if (!hasData)
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center">No alignment data available</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.2/dist/echarts.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.3/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize DataTable if table has data
            if ($('#alignmentTable tbody tr').length > 1 || $('#alignmentTable tbody tr td').length > 1) {
                $('#alignmentTable').DataTable({
                    "responsive": true,
                    "pageLength": 10,
                    dom: 'Bfrtip',
                    buttons: [
                        'copy', 'excel', 'pdf'
                    ]
                });
            }
            
            // Only initialize chart if element exists (only rendered when data is available)
            var chartElement = document.getElementById('strategic-alignment-diagram');
            if (chartElement) {
                // Initialize chart
                var chart = echarts.init(chartElement);
                
                // Data for sankey diagram
                var data = {
                    nodes: [
                        // Business Strategies
                        @if (Model.BusinessStrategies != null)
                        {
                            foreach (var strategy in Model.BusinessStrategies)
                            {
                                <text>{ name: 'S: @Html.Raw(Json.Serialize(strategy.BusinessGoal))', category: 'strategy' },</text>
                            }
                        }
                        
                        // Business Capabilities
                        @if (Model.Capabilities != null)
                        {
                            foreach (var capability in Model.Capabilities)
                            {
                                <text>{ name: 'C: @Html.Raw(Json.Serialize(capability.CapabilityName))', category: 'capability' },</text>
                            }
                        }
                        
                        // Applications
                        @if (Model.Applications != null)
                        {
                            foreach (var app in Model.Applications)
                            {
                                <text>{ name: 'A: @Html.Raw(Json.Serialize(app.ApplicationName))', category: 'application' },</text>
                            }
                        }
                    ],
                    links: [
                        // Strategy to Capability links
                        @if (Model.StrategyCapabilityLinks != null && Model.BusinessStrategies != null && Model.Capabilities != null)
                        {
                            foreach (var link in Model.StrategyCapabilityLinks)
                            {
                                var strategy = Model.BusinessStrategies.FirstOrDefault(s => s.Id.ToString() == link.SourceArtifactId);
                                var capability = Model.Capabilities.FirstOrDefault(c => c.Id.ToString() == link.TargetArtifactId);
                                
                                if (strategy != null && capability != null)
                                {
                                    <text>{ source: 'S: @Html.Raw(Json.Serialize(strategy.BusinessGoal))', target: 'C: @Html.Raw(Json.Serialize(capability.CapabilityName))', value: 1 },</text>
                                }
                            }
                        }
                        
                        // Capability to Application links
                        @if (Model.CapabilityApplicationLinks != null && Model.Capabilities != null && Model.Applications != null)
                        {
                            foreach (var link in Model.CapabilityApplicationLinks)
                            {
                                var capability = Model.Capabilities.FirstOrDefault(c => c.Id.ToString() == link.SourceArtifactId);
                                var app = Model.Applications.FirstOrDefault(a => a.Id.ToString() == link.TargetArtifactId);
                                
                                if (capability != null && app != null)
                                {
                                    <text>{ source: 'C: @Html.Raw(Json.Serialize(capability.CapabilityName))', target: 'A: @Html.Raw(Json.Serialize(app.ApplicationName))', value: 1 },</text>
                                }
                            }
                        }
                    ]
                };
                
                try {
                    // Verify data structure before creating chart
                    if (!Array.isArray(data.nodes) || data.nodes.length === 0 || 
                        !Array.isArray(data.links) || data.links.length === 0) {
                        console.error("Invalid data structure for strategic alignment diagram");
                        
                        // Display a message instead of the chart
                        chartElement.innerHTML = '<div class="alert alert-warning text-center">' +
                                               '<i class="fas fa-exclamation-circle mr-2"></i>' +
                                               'Unable to generate chart: insufficient or invalid data' +
                                               '</div>';
                        return;
                    }
                    
                    // Validate node names are defined
                    data.nodes = data.nodes.filter(node => node && node.name && typeof node.name === 'string');
                    
                    // Validate links have valid source and target
                    data.links = data.links.filter(link => {
                        if (!link || !link.source || !link.target) return false;
                        
                        // Check if source and target exist in nodes
                        const sourceExists = data.nodes.some(node => node.name === link.source);
                        const targetExists = data.nodes.some(node => node.name === link.target);
                        
                        return sourceExists && targetExists;
                    });
                
                    // Chart configuration
                    var option = {
                        title: {
                            text: 'Strategic Alignment Visualization',
                            left: 'center'
                        },
                        tooltip: {
                            trigger: 'item',
                            triggerOn: 'mousemove'
                        },
                        animation: true,
                        series: [
                            {
                                type: 'sankey',
                                data: data.nodes,
                                links: data.links,
                                emphasis: {
                                    focus: 'adjacency'
                                },
                                levels: [
                                    {
                                        depth: 0,
                                        itemStyle: {
                                            color: '#4e73df'
                                        },
                                        lineStyle: {
                                            color: 'source',
                                            opacity: 0.6
                                        }
                                    },
                                    {
                                        depth: 1,
                                        itemStyle: {
                                            color: '#1cc88a'
                                        },
                                        lineStyle: {
                                            color: 'source',
                                            opacity: 0.6
                                        }
                                    },
                                    {
                                        depth: 2,
                                        itemStyle: {
                                            color: '#36b9cc'
                                        }
                                    }
                                ],
                                lineStyle: {
                                    curveness: 0.5
                                }
                            }
                        ]
                    };
                    
                    // Apply chart options
                    chart.setOption(option);
                } catch (e) {
                    console.error("Error initializing strategic alignment diagram:", e);
                    chartElement.innerHTML = '<div class="alert alert-danger text-center">' +
                                           '<i class="fas fa-exclamation-triangle mr-2"></i>' +
                                           'Error generating chart: ' + e.message +
                                           '</div>';
                }
                
                // Handle resize
                window.addEventListener('resize', function() {
                    chart.resize();
                });
                
                // Fullscreen toggle
                document.getElementById('toggleFullscreen').addEventListener('click', function() {
                    var chartContainer = document.getElementById('strategic-alignment-diagram');
                    
                    if (chartContainer.classList.contains('fullscreen')) {
                        chartContainer.classList.remove('fullscreen');
                        this.innerHTML = '<i class="fas fa-expand"></i> Fullscreen';
                        chartContainer.style.height = '500px';
                    } else {
                        chartContainer.classList.add('fullscreen');
                        this.innerHTML = '<i class="fas fa-compress"></i> Exit Fullscreen';
                        chartContainer.style.height = '85vh';
                    }
                    
                    // Resize chart after container size change
                    setTimeout(function() {
                        chart.resize();
                    }, 100);
                });
                
                // Export button
                document.getElementById('exportBtn').addEventListener('click', function() {
                    var dataURL = chart.getDataURL({
                        pixelRatio: 2,
                        backgroundColor: '#fff'
                    });
                    
                    // Create an invisible anchor element to trigger download
                    var downloadLink = document.createElement('a');
                    downloadLink.href = dataURL;
                    downloadLink.download = 'strategic-alignment.png';
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                });
            } else {
                // Hide export button if there's no chart
                document.getElementById('exportBtn').style.display = 'none';
                document.getElementById('toggleFullscreen').style.display = 'none';
            }
        });
    </script>
    
    <style>
        .fullscreen {
            position: fixed;
            top: 60px;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 9999;
            background-color: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.3);
            overflow: auto;
        }
        
        .badge {
            font-size: 85%;
            padding: 0.4em 0.6em;
        }
        
        .table-responsive {
            min-height: 200px;
        }
        
        /* ECharts tooltip styling */
        .echarts-tooltip {
            background-color: rgba(255, 255, 255, 0.9) !important;
            border: 1px solid #ccc !important;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;
        }
        
        /* DataTables styling */
        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background: #4e73df !important;
            color: white !important;
            border: none;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: #4e73df !important;
            color: white !important;
            border: none;
        }
        
        .dt-buttons button {
            background-color: #f8f9fc !important;
            border-color: #d1d3e2 !important;
            color: #6e707e !important;
        }
        
        .dt-buttons button:hover {
            background-color: #eaecf4 !important;
        }
    </style>
}