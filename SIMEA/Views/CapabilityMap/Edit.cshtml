@model SIMEA.Models.CapabilityMap

@{
    ViewData["Title"] = "Edit Capability Map";
    Layout = "~/Views/Shared/_LayoutAcc.cshtml";
}

<div class="form-horizontal">
    <div class="container-fluid">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Edit Capability Map</h6>
            </div>
            <div class="card-body">
                <form asp-action="Edit" id="editForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="Id" />
                    
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label asp-for="CapabilityName" class="control-label">Capability Name*</label>
                            <input asp-for="CapabilityName" class="form-control" required />
                            <span asp-validation-for="CapabilityName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-6">
                            <label asp-for="MaturityLevel" class="control-label">Maturity Level*</label>
                            <select asp-for="MaturityLevel" class="form-control" required>
                                <option value="">Select Maturity Level</option>
                                <option value="Initial">Initial</option>
                                <option value="Developing">Developing</option>
                                <option value="Defined">Defined</option>
                                <option value="Managed">Managed</option>
                                <option value="Optimized">Optimized</option>
                            </select>
                            <span asp-validation-for="MaturityLevel" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="CapabilityDescription" class="control-label">Capability Description*</label>
                        <textarea asp-for="CapabilityDescription" class="form-control" rows="3" required></textarea>
                        <span asp-validation-for="CapabilityDescription" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Owner" class="control-label">Owner*</label>
                        <input asp-for="Owner" class="form-control" required />
                        <span asp-validation-for="Owner" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label>Key Processes</label>
                        <div class="input-group">
                            <input type="text" id="processInput" class="form-control" placeholder="Add key process" />
                            <div class="input-group-append">
                                <button type="button" id="addProcess" class="btn btn-outline-secondary">Add</button>
                                <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#processesModal">
                                    <i class="fas fa-list"></i> Manage
                                </button>
                            </div>
                        </div>
                        <div id="processesList" class="mt-2">
                            <!-- Existing processes will be populated via JavaScript -->
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Dependencies</label>
                        <div class="input-group">
                            <input type="text" id="dependencyInput" class="form-control" placeholder="Add dependency" />
                            <div class="input-group-append">
                                <button type="button" id="addDependency" class="btn btn-outline-secondary">Add</button>
                                <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#dependenciesModal">
                                    <i class="fas fa-list"></i> Manage
                                </button>
                            </div>
                        </div>
                        <div id="dependenciesList" class="mt-2">
                            <!-- Existing dependencies will be populated via JavaScript -->
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Gaps</label>
                        <div class="input-group">
                            <input type="text" id="gapInput" class="form-control" placeholder="Add gap" />
                            <div class="input-group-append">
                                <button type="button" id="addGap" class="btn btn-outline-secondary">Add</button>
                                <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#gapsModal">
                                    <i class="fas fa-list"></i> Manage
                                </button>
                            </div>
                        </div>
                        <div id="gapsList" class="mt-2">
                            <!-- Existing gaps will be populated via JavaScript -->
                        </div>
                    </div>

                    <hr />
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save</button>
                        <a asp-action="Index" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Back to List</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Processes Modal -->
    <div class="modal fade" id="processesModal" tabindex="-1" role="dialog" aria-labelledby="processesModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="processesModalLabel">Manage Key Processes</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul class="list-group" id="processesModalList">
                        <!-- Processes will be added here -->
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="processModalInput" class="form-control" placeholder="Add new process" />
                        <div class="input-group-append">
                            <button type="button" id="addProcessModal" class="btn btn-primary">Add</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Dependencies Modal -->
    <div class="modal fade" id="dependenciesModal" tabindex="-1" role="dialog" aria-labelledby="dependenciesModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="dependenciesModalLabel">Manage Dependencies</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul class="list-group" id="dependenciesModalList">
                        <!-- Dependencies will be added here -->
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="dependencyModalInput" class="form-control" placeholder="Add new dependency" />
                        <div class="input-group-append">
                            <button type="button" id="addDependencyModal" class="btn btn-primary">Add</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Gaps Modal -->
    <div class="modal fade" id="gapsModal" tabindex="-1" role="dialog" aria-labelledby="gapsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="gapsModalLabel">Manage Gaps</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul class="list-group" id="gapsModalList">
                        <!-- Gaps will be added here -->
                    </ul>
                    <div class="input-group mt-3">
                        <input type="text" id="gapModalInput" class="form-control" placeholder="Add new gap" />
                        <div class="input-group-append">
                            <button type="button" id="addGapModal" class="btn btn-primary">Add</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            // Initialize lists with existing data
            let processes = @Html.Raw(Json.Serialize(Model.KeyProcesses ?? new List<string>()));
            let dependencies = @Html.Raw(Json.Serialize(Model.Dependencies ?? new List<string>()));
            let gaps = @Html.Raw(Json.Serialize(Model.Gaps ?? new List<string>()));

            // Functions to update UI displays
            function updateProcessesList() {
                let html = '';
                processes.forEach((process, index) => {
                    html += `<div class="badge badge-success mr-2 mb-2 p-2">${process}
                        <a href="#" class="text-white ml-1 remove-process" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </a>
                        <input type="hidden" name="KeyProcesses[${index}]" value="${process}" />
                    </div>`;
                });
                $('#processesList').html(html);
                updateProcessesModal();
            }

            function updateDependenciesList() {
                let html = '';
                dependencies.forEach((dependency, index) => {
                    html += `<div class="badge badge-primary mr-2 mb-2 p-2">${dependency}
                        <a href="#" class="text-white ml-1 remove-dependency" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </a>
                        <input type="hidden" name="Dependencies[${index}]" value="${dependency}" />
                    </div>`;
                });
                $('#dependenciesList').html(html);
                updateDependenciesModal();
            }

            function updateGapsList() {
                let html = '';
                gaps.forEach((gap, index) => {
                    html += `<div class="badge badge-danger mr-2 mb-2 p-2">${gap}
                        <a href="#" class="text-white ml-1 remove-gap" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </a>
                        <input type="hidden" name="Gaps[${index}]" value="${gap}" />
                    </div>`;
                });
                $('#gapsList').html(html);
                updateGapsModal();
            }

            function updateProcessesModal() {
                let html = '';
                processes.forEach((process, index) => {
                    html += `<li class="list-group-item d-flex justify-content-between align-items-center">
                        ${process}
                        <button type="button" class="btn btn-sm btn-danger remove-process-modal" data-index="${index}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </li>`;
                });
                $('#processesModalList').html(html);
            }

            function updateDependenciesModal() {
                let html = '';
                dependencies.forEach((dependency, index) => {
                    html += `<li class="list-group-item d-flex justify-content-between align-items-center">
                        ${dependency}
                        <button type="button" class="btn btn-sm btn-danger remove-dependency-modal" data-index="${index}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </li>`;
                });
                $('#dependenciesModalList').html(html);
            }

            function updateGapsModal() {
                let html = '';
                gaps.forEach((gap, index) => {
                    html += `<li class="list-group-item d-flex justify-content-between align-items-center">
                        ${gap}
                        <button type="button" class="btn btn-sm btn-danger remove-gap-modal" data-index="${index}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </li>`;
                });
                $('#gapsModalList').html(html);
            }

            // Initial display
            updateProcessesList();
            updateDependenciesList();
            updateGapsList();

            // Add from main form
            $('#addProcess').click(function () {
                const process = $('#processInput').val().trim();
                if (process && !processes.includes(process)) {
                    processes.push(process);
                    updateProcessesList();
                    $('#processInput').val('');
                }
            });

            $('#addDependency').click(function () {
                const dependency = $('#dependencyInput').val().trim();
                if (dependency && !dependencies.includes(dependency)) {
                    dependencies.push(dependency);
                    updateDependenciesList();
                    $('#dependencyInput').val('');
                }
            });

            $('#addGap').click(function () {
                const gap = $('#gapInput').val().trim();
                if (gap && !gaps.includes(gap)) {
                    gaps.push(gap);
                    updateGapsList();
                    $('#gapInput').val('');
                }
            });

            // Add from modals
            $('#addProcessModal').click(function () {
                const process = $('#processModalInput').val().trim();
                if (process && !processes.includes(process)) {
                    processes.push(process);
                    updateProcessesList();
                    $('#processModalInput').val('');
                }
            });

            $('#addDependencyModal').click(function () {
                const dependency = $('#dependencyModalInput').val().trim();
                if (dependency && !dependencies.includes(dependency)) {
                    dependencies.push(dependency);
                    updateDependenciesList();
                    $('#dependencyModalInput').val('');
                }
            });

            $('#addGapModal').click(function () {
                const gap = $('#gapModalInput').val().trim();
                if (gap && !gaps.includes(gap)) {
                    gaps.push(gap);
                    updateGapsList();
                    $('#gapModalInput').val('');
                }
            });

            // Remove from main form
            $(document).on('click', '.remove-process', function (e) {
                e.preventDefault();
                const index = $(this).data('index');
                processes.splice(index, 1);
                updateProcessesList();
            });

            $(document).on('click', '.remove-dependency', function (e) {
                e.preventDefault();
                const index = $(this).data('index');
                dependencies.splice(index, 1);
                updateDependenciesList();
            });

            $(document).on('click', '.remove-gap', function (e) {
                e.preventDefault();
                const index = $(this).data('index');
                gaps.splice(index, 1);
                updateGapsList();
            });

            // Remove from modals
            $(document).on('click', '.remove-process-modal', function () {
                const index = $(this).data('index');
                processes.splice(index, 1);
                updateProcessesList();
            });

            $(document).on('click', '.remove-dependency-modal', function () {
                const index = $(this).data('index');
                dependencies.splice(index, 1);
                updateDependenciesList();
            });

            $(document).on('click', '.remove-gap-modal', function () {
                const index = $(this).data('index');
                gaps.splice(index, 1);
                updateGapsList();
            });

            // Handle enter key presses
            $('#processInput, #processModalInput').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $(this).closest('.input-group').find('button:first').click();
                }
            });

            $('#dependencyInput, #dependencyModalInput').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $(this).closest('.input-group').find('button:first').click();
                }
            });

            $('#gapInput, #gapModalInput').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $(this).closest('.input-group').find('button:first').click();
                }
            });
        });
    </script>
}