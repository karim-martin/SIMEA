@model SIMEA.Models.DataGovernanceModel

@{
    ViewData["Title"] = "Create Data Governance Model";
    Layout = "~/Views/Shared/_LayoutAcc.cshtml";
}

<div class="form-horizontal">
    <div class="container-fluid">
        <h1 class="mt-4">Create Data Governance Model</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="/Home/Index">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="/DataGovernance/Index">Data Governance Models</a></li>
            <li class="breadcrumb-item active">Create</li>
        </ol>

        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-plus-circle mr-1"></i>
                Add New Data Governance Model
            </div>
            <div class="card-body">
                <form asp-action="Create" asp-controller="DataGovernance" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <label asp-for="DataEntity" class="control-label">Data Entity</label>
                            <input asp-for="DataEntity" class="form-control" required />
                            <span asp-validation-for="DataEntity" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label asp-for="DataOwner" class="control-label">Data Owner</label>
                            <input asp-for="DataOwner" class="form-control" required />
                            <span asp-validation-for="DataOwner" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-6">
                            <label asp-for="DataSteward" class="control-label">Data Steward</label>
                            <input asp-for="DataSteward" class="form-control" required />
                            <span asp-validation-for="DataSteward" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="DataLifecycle" class="control-label">Data Lifecycle</label>
                        <textarea asp-for="DataLifecycle" class="form-control" rows="3" required></textarea>
                        <span asp-validation-for="DataLifecycle" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label>Data Quality Metrics</label>
                        <div class="input-group">
                            <input type="text" id="metricsInput" class="form-control" placeholder="Add quality metric">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="addMetric" type="button">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        </div>
                        <div class="mt-2" id="metricsList">
                            <span class="badge badge-secondary mr-1 mb-1 no-metrics">No metrics added</span>
                        </div>
                        <div id="metricsContainer">
                            <!-- Hidden inputs will be created here dynamically -->
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Data Policies</label>
                        <div class="input-group">
                            <input type="text" id="policyInput" class="form-control" placeholder="Add data policy">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="addPolicy" type="button">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        </div>
                        <div class="mt-2" id="policiesList">
                            <span class="badge badge-secondary mr-1 mb-1 no-policies">No policies added</span>
                        </div>
                        <div id="policiesContainer">
                            <!-- Hidden inputs will be created here dynamically -->
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Compliance Requirements</label>
                        <div class="input-group">
                            <input type="text" id="complianceInput" class="form-control" placeholder="Add compliance requirement">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="addCompliance" type="button">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        </div>
                        <div class="mt-2" id="complianceList">
                            <span class="badge badge-secondary mr-1 mb-1 no-compliance">No compliance requirements added</span>
                        </div>
                        <div id="complianceContainer">
                            <!-- Hidden inputs will be created here dynamically -->
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Dependencies</label>
                        <div class="input-group">
                            <input type="text" id="dependencyInput" class="form-control" placeholder="Add dependency">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="addDependency" type="button">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </div>
                        </div>
                        <div class="mt-2" id="dependenciesList">
                            <span class="badge badge-secondary mr-1 mb-1 no-dependencies">No dependencies added</span>
                        </div>
                        <div id="dependenciesContainer">
                            <!-- Hidden inputs will be created here dynamically -->
                        </div>
                    </div>

                    <hr />
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save Data Governance Model</button>
                        <a asp-action="Index" asp-controller="DataGovernance" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to List
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            // Handle adding quality metrics
            $("#addMetric").click(function() {
                const value = $("#metricsInput").val().trim();
                
                if (value) {
                    addItem(value, "DataQualityMetrics", "metrics");
                    $("#metricsInput").val("");
                }
            });
            
            // Handle adding data policies
            $("#addPolicy").click(function() {
                const value = $("#policyInput").val().trim();
                
                if (value) {
                    addItem(value, "DataPolicies", "policies");
                    $("#policyInput").val("");
                }
            });
            
            // Handle adding compliance requirements
            $("#addCompliance").click(function() {
                const value = $("#complianceInput").val().trim();
                
                if (value) {
                    addItem(value, "ComplianceRequirements", "compliance");
                    $("#complianceInput").val("");
                }
            });
            
            // Handle adding dependencies
            $("#addDependency").click(function() {
                const value = $("#dependencyInput").val().trim();
                
                if (value) {
                    addItem(value, "Dependencies", "dependencies");
                    $("#dependencyInput").val("");
                }
            });
            
            // Handle enter key presses for all inputs
            $("#metricsInput").keypress(function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $("#addMetric").click();
                }
            });
            
            $("#policyInput").keypress(function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $("#addPolicy").click();
                }
            });
            
            $("#complianceInput").keypress(function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $("#addCompliance").click();
                }
            });
            
            $("#dependencyInput").keypress(function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $("#addDependency").click();
                }
            });
            
            // Function to add an item to a list
            function addItem(value, inputName, type) {
                // Remove "no items" badge if it exists
                $(`#${type}List .no-${type}`).remove();
                
                // Check if this item already exists
                if ($(`#${type}Container input[value="${value}"]`).length === 0) {
                    // Add the hidden input
                    $(`#${type}Container`).append(`<input type="hidden" name="${inputName}" value="${value}">`);
                    
                    // Add the badge to the display
                    const badgeClass = getBadgeClass(type);
                    $(`#${type}List`).append(`
                        <span class="badge ${badgeClass} mr-1 mb-1 ${type}-badge" data-value="${value}">
                            ${value} <i class="fas fa-times ml-1 remove-badge" data-type="${type}" data-value="${value}"></i>
                        </span>
                    `);
                }
            }
            
            // Function to get appropriate badge class
            function getBadgeClass(type) {
                switch(type) {
                    case 'metrics':
                        return 'badge-info';
                    case 'policies':
                        return 'badge-primary';
                    case 'compliance':
                        return 'badge-warning';
                    case 'dependencies':
                        return 'badge-secondary';
                    default:
                        return 'badge-primary';
                }
            }
            
            // Function to remove an item
            function removeItem(value, inputName, type) {
                // Remove the hidden input
                $(`#${type}Container input[value="${value}"]`).remove();
                
                // Remove the badge
                $(`#${type}List .${type}-badge[data-value="${value}"]`).remove();
                
                // Add "no items" badge if there are no more items
                if ($(`#${type}Container input`).length === 0) {
                    $(`#${type}List`).html(`<span class="badge badge-secondary mr-1 mb-1 no-${type}">No ${type} added</span>`);
                }
            }
            
            // Remove badges when clicking the X
            $(document).on("click", ".remove-badge", function() {
                const type = $(this).data("type");
                const value = $(this).data("value");
                
                let inputName;
                switch(type) {
                    case 'metrics':
                        inputName = "DataQualityMetrics";
                        break;
                    case 'policies':
                        inputName = "DataPolicies";
                        break;
                    case 'compliance':
                        inputName = "ComplianceRequirements";
                        break;
                    case 'dependencies':
                        inputName = "Dependencies";
                        break;
                    default:
                        inputName = type;
                }
                
                removeItem(value, inputName, type);
            });
        });
    </script>
}